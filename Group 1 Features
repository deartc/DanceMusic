

/* Teresa Hawkins */
/* DanceMusic Project */



/*Query  - used for Group 1 : 
Write a SELECT query that uses an OR and an AND operator. . */

SELECT artist_id
FROM artist
WHERE artist_name =  Abba'

SELECT album_id
FROM album
WHERE album_name =  'Joy'

SELECT COUNT(*)
FROM track
WHERE artist_id=1 AND album_id =1 



/* Query - used for Group 1. Write a SELECT query that utilizes a variable in the WHERE clause. Write a SELECT query that utilizes an ORDER BY clause. */

SELECT COUNT( * ) 
FROM track
INNER JOIN artist ON artist.artist_id = track.artist_id
INNER JOIN album ON album.album_id = track.album_id
WHERE artist.artist_name =  'Abba'
AND album.album_name =  'Joy'



/*Query  - used for Group 1 : Reading Data from a Database Write a SELECT query that utilizes a JOIN. */


SELECT album_name
FROM album
INNER JOIN artist ON album.artist_id=artist.artist_id
WHERE artist_name='Abba'


/* -Group 1 Used: Reading Data from a Database Write a SELECT query that utilizes a JOIN with 3 or more tables.*/
-Names of top 10 rock bands
SELECT ar.Name AS ArtistName, COUNT(t.TrackId) AS TrackCount FROM tracks t
INNER JOIN albums al ON t.AlbumId = al.AlbumId
INNER JOIN artists ar ON al.ArtistId = ar.ArtistId
INNER JOIN genres g ON t.GenreId = g.GenreId
WHERE g.GenreId = 1 
GROUP BY al.ArtistId 
ORDER BY TrackCount DESC LIMIT 10

/*Group 1 not used: Write a SELECT query that utilizes a JOIN with 3 or more tables. Write a SELECT query that utilizes a LEFT JOIN. 
Write a SELECT query that utilizes a variable in the WHERE clause. Write a SELECT query that utilizes an ORDER BY clause.
Write a SELECT query that utilizes a GROUP BY clause along with an aggregate function. Write a SELECT query that utilizes a CALCULATED FIELD.
Write a SELECT query that utilizes a SUBQUERY. Write a SELECT query that utilizes a JOIN, at least 2 OPERATORS (AND, OR, =, IN, BETWEEN, ETC) 
AND A GROUP BY clause with an aggregate function. Write a SELECT query that utilizes a JOIN with 3 or more tables, at 2 OPERATORS (AND, OR, =, IN, BETWEEN, ETC), 
a GROUP BY clause with an aggregate function, and a HAVING clause. 
Write a SELECT query that uses a WHERE clause. Write a SELECT query that uses an OR and an AND operator.

Write a SELECT query that filters NULL rows using IS NOT NULL.*/




/* List the number of songs per artist in descending order*/

select
    ar.name "Artist Name",
    count(*) "Number of Songs"
from
    song s join album  al on s.album_id = al.id
    	   join artist ar on al.artist_id = ar.id
group by
    ar.name
order by
    count(*) desc
    
    
    
    
    
    -- title and artist who recorded the song 'Peace'
	SELECT title, artist
	FROM album JOIN track
	ON (album.asin=track.album)
	WHERE song = 'Peace'
	

	-- Artist who recorded the song 'Joy'? 
	SELECT artist
	FROM album JOIN track
	ON (album.asin = track.album)
	WHERE song = 'Joy'--Which artist or artists have recorded the most number of songs?

select
   ar.name "Artist Name",
   count(*) "Number of Songs"
from
    song s join album al on s.album_id = al.id
    	   join artist ar on al.artist_id = ar.id 
group by
   ar.name
order by
   count(*) desc
limit 1	
;   
  
/create procedure  inner join

CREATE PROCEDURE spAlbumsFromArtist 
	@ArtistName varchar(255)
AS
	SELECT AlbumName, ReleaseDate
	FROM Albums
		INNER JOIN Artists
		ON Albums.ArtistId = Artists.ArtistId 
	WHERE Artists.ArtistName = @ArtistName;
GO



 select genre.name, count(*),
         sum(count(*)) over () as tracks,
         round(100.0 * count(*) / sum(count(*)) over(), 2) as pct
    from           genre
         left join track using(genreid)
group by genre.name order by genre.name;




 



  
  
  
  
  select title as album,
         array_agg(distinct genre.name order by genre.name) as genres
    from      track
         join genre using(genreid)
         join album using (albumid)
group by title
  having count(distinct genre.name) > 1;
  
  
  
  
  
  
  
  
  
 select artist.name as artist,
       album.title as album,
       track.name as track,
       row_number()
         over(partition by albumid
                  order by trackid)
         as n,
       count(genreid)
         over(partition by albumid, genreid)
         as same

  from track
       join
       (
          select albumid,
                 array_agg(distinct genre.name
                           order by genre.name)
                   as genres
            from track
                 join genre using(genreid)
        group by albumid
          having count(distinct genre.name) > 1
        )
        as multi_genre_album(albumid, genres) using (albumid)

        join genre using(genreid)
        join album using(albumid)
        join artist using(artistid)
        
order by artist, album, trackid; 
  
  
  
 
 
 with multi_genre_albums(albumid, artistid, title) as
 (
    select albumid, artistid, title
      from      track
           join genre using(genreid)
           join album using (albumid)
  group by albumid, artistid, title
    having count(distinct genre.name) > 1
 )
 
 
 
 
 
 
 select artist.name as artist,
         title as album,
         genre.name as genre,
         array_agg(track.name order by trackid) as tracks
    from multi_genre_albums
         join track using(albumid)
         join genre using(genreid)
         join artist using(artistid)
group by artist, album, genre;


alter  example

ALTER PROCEDURE spAlbumsFromArtist 
    @ArtistName varchar(255)
AS
    SELECT 
        al.AlbumName, 
        al.ReleaseDate, 
        g.Genre
    FROM Albums al
        INNER JOIN Artists ar
        ON al.ArtistId = ar.ArtistId 
        INNER JOIN Genres g
        ON g.GenreId = al.GenreId 
    WHERE ar.ArtistName = @ArtistName;
GO









CREATE TABLE "Song"( "id" INTEGER PRIMARY KEY NOT NULL, "name" TEXT );
CREATE TABLE "Playlist"( "id" INTEGER PRIMARY KEY NOT NULL, "name" TEXT );
CREATE TABLE "Song_has_Playlist"( "Song_id" INTEGER NOT NULL, 
"Playlist_id" INTEGER NOT NULL, PRIMARY KEY("Song_id","Playlist_id"),
CONSTRAINT "fk_Song_has_Playlist_Song1" FOREIGN KEY("Song_id") REFERENCES "Song"("id"), 
CONSTRAINT "fk_Song_has_Playlist_Playlist1" FOREIGN KEY("Playlist_id") REFERENCES "Playlist"("id") );
CREATE INDEX "Song_has_Playlist.fk_Song_has_Playlist_Playlist1" ON "Song_has_Playlist"("Playlist_id"); 
CREATE INDEX "Song_has_Playlist.fk_Song_has_Playlist_Song1" ON "Song_has_Playlist"("Song_id");
