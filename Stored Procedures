/*********************************

Stored Procedures

*********************************/


/*
stored Procedure  (Update): CreateGetSong 
*/
Create procedure GetSong (Joy CHAR (100))
BEGIN select Joy, Life, 
from SONGS 
where AlbumName like concat("%”,Joy,"%") or SongName like concat("%",Life,"%");
END




CREATE PROCEDURE UpdateSong (Keyword CHAR (100))
(BEGIN INSERT INTO SONGS (SongID, SongName, AlbumID, AlbumName,) 
VALUES
( 1, Joy, 1, Abba);
END
 
create procedure GetSong (Joy CHAR (100))
BEGIN select Joy, Life, 
from SONGS 
where AlbumName like concat("%”,Joy,"%") or SongName like concat("%",Life,"%");
END






create procedure add_songs (SongID int, SongName char(100), AlbumID int, AlbumName char(100))
BEGIN 
INSERT INTO SONGS (SongID, SongName, AlbumID, AlbumName,) 
VALUES( SongID, SongName, AlbumID, AlbumName,)
;

END
 

 
 

 
 
 
---  Crud replace-Read 
 
INSERT         with   a         SELECT         query INSERT INTO AlbumSong (songId, 
albumId) SELECT s.songId, 
a.albumID FROM Song s JOIN Album a
ON s.title = 'joy' AND 
a.title = 'Abba';
 
 
                    
-UPDate year                
UPDATE Album SET year = 2011
WHERE 
title = 'Life';
 
 
-UPDATE ALBUM by subtracting a year
UPDATE Album SET year = year - 1; 
 
-DELETE

DELETE FROM Song WHERE songId = 
1;
 
-DELETE       
DELETE FROM Album WHERE title = 
'Life' AND year = 2011;
 
 
-Deletes       all       records        in       the     Songs table (only used for example not actually implemented
 
- DELETE FROM Song; 
 
 
 
 
 
 
--UPDATE
 
 
 

UPDATE Song
SET Duration =  600
WHERE SongID = 1;
 
 
UPDATE A
SET A.Description = 'Good Song'
FROM Song AS A
WHERE EXISTS (SELECT 1 FROM .GoodSongs WHERE A.SongID = SongID)
 
--update the entire table. 
 
UPDATE Song
SET Description = CASE  WHEN Duration >= 300 
                                 THEN 'Long Song' 
                                 ELSE 'Short Song' 
                                 END
 
 
---Delete
 
DELETE A
FROM dbo.Songs AS a
WHERE EXISTS (SELECT 1 FROM dbo.BadSongs WHERE a.SongID = SongID);
 
 
DELETE dbo.Songs
WHERE SongID = 1;
 
 
 
 
 
 
 
 
 
--INDEXED
CREATE NONCLUSTERED INDEX IX_NAME ON Songs (Name);
 
                              
  
 
 
                

create procedure add_album (AlbumID int, AlbumName char(100), BandName char(100), BandID int, NumberOfSongs int, Genre char(100))
BEGIN INSERT INTO 
ALBUM 
(AlbumID, 
AlbumName, 
VALUES ( AlbumID, AlbumName);
END
 
 
create procedure add_songs (SongID int, SongName char(100), AlbumID int, AlbumName char(100))
BEGIN INSERT INTO SONGS (SongID, SongName, AlbumID, AlbumName) 
VALUES( SongID, SongName, AlbumID, AlbumName,)
;
END
 
create procedure GetSong (Keyword CHAR (100))
BEGIN select SongName, AlbumName, BandName, Lyrical_Themes, GuestArtists
from SONGS 
where BandName like concat("%",Keyword,"%") or AlbumName like concat("%",Keyword,"%") or SongName like concat("%",Keyword,"%");
END;
 
 
 
create procedure GetBandMember(Keyword CHAR (100))
BEGIN select First_Name, Last_Name, Stage_Name, Role, ii.BandName 
from INDIVIDUAL_ARTIST i join BAND ii on i.BandID = ii.BandID 
where First_Name like concat("%",Keyword,"%") or Last_Name like concat("%",Keyword,"%") ;
END;
 
 
 
 
 
 
 
 
------check to see if i need this
 
 
CREATE UNIQUE INDEX song_index
  ON Song (songId) PCTFREE 10 ALLOW REVERSE SCANS;
ALTER TABLE song
  ADD CONSTRAINT PK_song
  PRIMARY KEY (songid);
ALTER TABLE song
  ADD CONSTRAINT fk_album
  FOREIGN KEY (albumid)
  REFERENCES album (albumid);
