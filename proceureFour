/*Created DDL (Data Definition Language) for tables and views.  Created DML (Data Manipulation Language) to load the tables with sample data.
Created and called at least 4 stored procedures.
Created stored procedures to expose CRUD (Create, Read, Update, and Delete) functionality.*/

 create procedure add_album (AlbumID int, AlbumName char(100), BandName char(100), BandID int, NumberOfSongs int, Genre char(100)) 
BEGIN
INSERT INTO ARTIST (AlbumID, AlbumName, BandName, BandID, NumberOfSongs, Genre) VALUES(
 AlbumID, AlbumName, BandName, BandID, NumberOfSongs, Genre);  
END

  
  create procedure add_album (AlbumID int, AlbumName char(100), BandName char(100), BandID int, NumberOfSongs int, Genre char(100)) 
BEGIN
INSERT INTO ARTIST (AlbumID, AlbumName, BandName, BandID, NumberOfSongs, Genre) VALUES(
 AlbumID, AlbumName, BandName, BandID, NumberOfSongs, Genre);  
END

create procedure add_songs (SongID int, SongName char(100), AlbumID int, AlbumName char(100), BandID int, BandName char(100), Style char(100), Rhythym char(100)) 
BEGIN
INSERT INTO ARTIST (SongID, SongName, AlbumID, AlbumName, BandID, BandName, Style, Rhythym) VALUES(
 SongID, SongName, AlbumID, AlbumName, BandID, BandName,Style , Rhythym);  
END


GO

EXECUTE add_album
GO

  
  END;
  
  
  --Alter song and album table
  
  
  CREATE UNIQUE INDEX song_index
  ON Song (songId) PCTFREE 10 ALLOW REVERSE SCANS;
 
ALTER TABLE song
  ADD CONSTRAINT PK_song
  PRIMARY KEY (songid);
 
ALTER TABLE song
  ADD CONSTRAINT fk_album
  FOREIGN KEY (albumid)
  REFERENCES album (albumid);
  
  
  
  
  
  UPDATE music AS m SET albumID = (SELECT albumID FROM albumList AS a WHERE m.songalbum = a.album) WHERE albumID IS NULL
AND EXISTS (SELECT 1 FROM albumList AS a WHERE m.songalbum = a.album) ;








